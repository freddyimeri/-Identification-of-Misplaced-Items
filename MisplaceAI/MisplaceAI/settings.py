"""
MisplaceAI/MisplaceAI/settings.py

Django settings for MisplaceAI project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-34gsb7^)t!ltchc4#2^sn_#+$(4i=ts107$(2yjy#ung+%mrn2'

# Media files configuration
# URL that handles the media served from MEDIA_ROOT, used for managing stored files.
MEDIA_URL = '/media/'
# Path where media files are stored.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# SECURITY WARNING: don't run with debug turned on in production!
# Enable debug mode only during development.
DEBUG = True



ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    # Default Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Custom apps for the MisplaceAI project
    'rules.apps.RulesConfig',
    'authentication.apps.AuthenticationConfig',
    'core.apps.CoreConfig',
    'admin_app.apps.AdminAppConfig',
    'item_detector.apps.ItemDetectorConfig',
    'placement_rules.apps.PlacementRulesConfig',
    'results_viewer.apps.ResultsViewerConfig',
    'process_misplaced_manager.apps.ProcessMisplacedManagerConfig',
    
    # Third-party apps
    'rest_framework',
    'corsheaders',
    'user_dashboard',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # Middleware to handle Cross-Origin Resource Sharing (CORS)
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# List of origins that are allowed to make cross-site HTTP requests
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

# List of trusted origins for CSRF protection
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
]

# Whether to allow all origins to make cross-site HTTP requests (set to False for security)
CORS_ORIGIN_ALLOW_ALL = False

# Allow cookies to be included in cross-site HTTP requests
CORS_ALLOW_CREDENTIALS = True

# Whether the CSRF cookie is accessible only by the HTTP protocol (True for security)
CSRF_COOKIE_HTTPONLY = True

ROOT_URLCONF = 'MisplaceAI.urls'

# Session settings
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Do not expire the session when the browser closes
SESSION_COOKIE_SECURE = False  # Set to True if using HTTPS
SESSION_SAVE_EVERY_REQUEST = True  # Save the session cookie on every request

# Configuration of the session engine to use database-backed sessions
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MisplaceAI.wsgi.application'

# Django REST framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# Configuration for Simple JWT (JSON Web Token) authentication
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,  # Automatically issue new refresh tokens
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist old refresh tokens after rotation
}

# Allow all origins for CORS
CORS_ALLOW_ALL_ORIGINS = True

# Database configuration
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'misplaceai',
        'USER': 'user',
        'PASSWORD': 'password',
        'HOST': 'db',  # Use service name defined in docker-compose.yml
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization settings
# https://docs.djangoproject.com/en/4.0/topics/i18n/

# Language code for the project
LANGUAGE_CODE = 'en-us'

# Time zone for the project
TIME_ZONE = 'UTC'

# Enable internationalization
USE_I18N = True

# Enable time zone support
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# URL to use when referring to static files
STATIC_URL = '/static/'

# Directories where static files are stored
STATICFILES_DIRS = [
    BASE_DIR / "static",
    BASE_DIR / "authentication/static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Ngrok configuration for development
if DEBUG:
    import requests
    try:
        # Get the public URL for the Ngrok tunnel
        ngrok_tunnel = requests.get('http://localhost:4040/api/tunnels').json()['tunnels'][0]['public_url']
        # Extract the hostname from the Ngrok URL
        ngrok_hostname = ngrok_tunnel.split("//")[-1].split(":")[0]
        # Add the Ngrok hostname to allowed hosts
        ALLOWED_HOSTS.append(ngrok_hostname)
    except requests.exceptions.RequestException:
        pass
